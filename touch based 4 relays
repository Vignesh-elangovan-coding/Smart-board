#include <WiFi.h>
#include <WiFiManager.h>
#include <ArduinoIoTCloud.h>
#include <Arduino_ConnectionHandler.h>
#include <time.h>

// Device ID and Secret Key for Arduino IoT Cloud
const char DEVICE_ID[] = "90646041-72d8-4c98-9dba-32fa9e9cb404";
const char DEVICE_SECRET[] = "TK1asreP3JREwaKJPE9036EV4";

// Relay and Sensor Pins
#define PIR_PIN 13
#define LDR_PIN 34
#define LED_PIN_1 12
#define RELAY_PIN_1 25
#define RELAY_PIN_2 26
#define RELAY_PIN_3 27
#define RELAY_PIN_4 14  // Set to control fan using PWM
#define TOUCH_PIN_1 32
#define TOUCH_PIN_2 33
#define TOUCH_PIN_3 35
#define TOUCH_PIN_4 36
#define TOUCH_PIN_5 39   // Up touch sensor for fan speed
#define TOUCH_PIN_6 34   // Down touch sensor for fan speed

// PWM Parameters (for fan speed control)
const int pwmChannel = 0;
const int pwmFrequency = 5000; // 5 kHz
const int pwmResolution = 8;  // 8-bit resolution

// Timing Constants
const unsigned long debounceDelay = 1000;  // 1 second debounce delay
const unsigned long ledDuration = 10000;   // LED stays on for 10 seconds
const unsigned long printInterval = 1000;  // 1-second interval for LDR print

// States and Variables
unsigned long lastTouchTime[6] = {0, 0, 0, 0, 0, 0};  // Extended to 6 touch sensors
int fanSpeed = 0;  // Fan speed (0 to 4, representing 0% to 100%)

unsigned long lastPrintTime = 0; // Timer for controlling LDR print frequency
unsigned long ledTimer = 0; // Timer to track LED on duration
bool ledState = false; // Current state of the LED
bool offlineMode = false; // To handle offline scenarios
RTC_DATA_ATTR bool relaysState[4] = {false, false, false, false}; // Retain relay states across deep sleep

WiFiConnectionHandler ArduinoIoTPreferredConnection(DEVICE_ID, DEVICE_SECRET);

// Cloud properties
CloudSwitch relayState1;
CloudSwitch relayState2;
CloudSwitch relayState3;
CloudSwitch relayState4;
float ldrValue;
float ldrPercentage;

void onRelayState1Change() {
  digitalWrite(RELAY_PIN_1, relayState1 ? HIGH : LOW);
}

void onRelayState2Change() {
  digitalWrite(RELAY_PIN_2, relayState2 ? HIGH : LOW);
}

void onRelayState3Change() {
  digitalWrite(RELAY_PIN_3, relayState3 ? HIGH : LOW);
}

void onRelayState4Change() {
  digitalWrite(RELAY_PIN_4, relayState4 ? HIGH : LOW);
}

void goToDeepSleep() {
  esp_sleep_enable_ext1_wakeup(
    (1ULL << TOUCH_PIN_1) | (1ULL << TOUCH_PIN_2) |
    (1ULL << TOUCH_PIN_3) | (1ULL << TOUCH_PIN_4),
    ESP_EXT1_WAKEUP_ANY_HIGH
  );
  esp_deep_sleep_start();
}

void handlePIRSensor() {
  static unsigned long motionEndTime = 0;
  static bool motionActive = false;

  if (digitalRead(PIR_PIN) == HIGH) {
    digitalWrite(LED_PIN_1, HIGH);
    ledState = true;
    motionActive = true;
    ledTimer = millis();
  } else {
    if (motionActive) {
      motionEndTime = millis();
      motionActive = false;
    }

    if (ledState && (millis() - motionEndTime >= ledDuration)) {
      digitalWrite(LED_PIN_1, LOW);
      ledState = false;
    }
  }
}

void syncTimeManually() {
  configTime(0, 0, "pool.ntp.org", "time.nist.gov");
  Serial.println("Synchronizing time...");
  int retries = 0;
  while (!time(nullptr) && retries < 10) {
    Serial.print(".");
    delay(1000);
    retries++;
  }

  if (time(nullptr)) {
    Serial.println("\nTime synchronized successfully.");
  } else {
    Serial.println("\nFailed to synchronize time. Switching to offline mode.");
    offlineMode = true;
  }
}

// Update Fan Speed (PWM control)
void updateFanSpeed() {
  int pwmValue = fanSpeed * 255 / 4;  // Map the fan speed to PWM (0 to 255)
  ledcWrite(pwmChannel, pwmValue);  // Set PWM duty cycle
}

void setup() {
  Serial.begin(115200);

  // Initialize GPIOs
  pinMode(PIR_PIN, INPUT);
  pinMode(LDR_PIN, INPUT);
  pinMode(LED_PIN_1, OUTPUT);
  pinMode(RELAY_PIN_1, OUTPUT);
  pinMode(RELAY_PIN_2, OUTPUT);
  pinMode(RELAY_PIN_3, OUTPUT);
  pinMode(RELAY_PIN_4, OUTPUT);

  pinMode(TOUCH_PIN_1, INPUT);
  pinMode(TOUCH_PIN_2, INPUT);
  pinMode(TOUCH_PIN_3, INPUT);
  pinMode(TOUCH_PIN_4, INPUT);
  pinMode(TOUCH_PIN_5, INPUT);  // Up touch sensor
  pinMode(TOUCH_PIN_6, INPUT);  // Down touch sensor

  // Initialize PWM with the new API
  ledcAttach(RELAY_PIN_4, pwmFrequency, pwmResolution);

  // Restore relay states from RTC memory
  for (int i = 0; i < 4; i++) {
    digitalWrite((i == 0 ? RELAY_PIN_1 : (i == 1 ? RELAY_PIN_2 : (i == 2 ? RELAY_PIN_3 : RELAY_PIN_4))), relaysState[i] ? HIGH : LOW);
  }

  // WiFi Manager setup
  WiFiManager wifiManager;
  if (!wifiManager.autoConnect("SmartSwitchBoard")) {
    Serial.println("WiFi connection failed. Restarting...");
    delay(3000);
    ESP.restart();
  }

  Serial.println("Connected to Wi-Fi.");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());

  // Sync time manually
  syncTimeManually();

  if (!offlineMode) {
    // Arduino IoT Cloud setup
    ArduinoCloud.setBoardId(DEVICE_ID);
    ArduinoCloud.setSecretDeviceKey(DEVICE_SECRET);

    ArduinoCloud.addProperty(relayState1, READWRITE, ON_CHANGE, onRelayState1Change);
    ArduinoCloud.addProperty(relayState2, READWRITE, ON_CHANGE, onRelayState2Change);
    ArduinoCloud.addProperty(relayState3, READWRITE, ON_CHANGE, onRelayState3Change);
    ArduinoCloud.addProperty(relayState4, READWRITE, ON_CHANGE, onRelayState4Change);

    ArduinoCloud.addProperty(ldrPercentage, READ, 1 * SECONDS);

    ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  }

  Serial.println("Setup complete. Entering deep sleep...");
  goToDeepSleep();
}

void loop() {
  if (!offlineMode) {
    ArduinoCloud.update();
  }

  // Read LDR value and calculate percentage
  ldrValue = analogRead(LDR_PIN);
  ldrPercentage = (ldrValue / 4095.0) * 100.0;

  // Print LDR value to Serial Monitor once per second
  if (millis() - lastPrintTime >= printInterval) {
    lastPrintTime = millis();
    Serial.print("LDR Percentage: ");
    Serial.print(ldrPercentage);
    Serial.println("%");
  }

  // Handle touch sensors
  unsigned long currentMillis = millis();
  const int TOUCH_SENSORS[] = {TOUCH_PIN_1, TOUCH_PIN_2, TOUCH_PIN_3, TOUCH_PIN_4, TOUCH_PIN_5, TOUCH_PIN_6};
  const int RELAYS[] = {RELAY_PIN_1, RELAY_PIN_2, RELAY_PIN_3, RELAY_PIN_4};

  for (int i = 0; i < 6; i++) {
    int touchValue = touchRead(TOUCH_SENSORS[i]);
    int touchThreshold = touchValue * 0.9;  // Example dynamic threshold
    if (i < 4) {  // Handle relay toggling for first 4 sensors
      if (touchValue < touchThreshold) {
        if (currentMillis - lastTouchTime[i] > debounceDelay) {
          digitalWrite(RELAYS[i], !digitalRead(RELAYS[i]));
          relaysState[i] = !relaysState[i];
          lastTouchTime[i] = currentMillis;
        }
      }
    }

    // Handle fan speed increase (Up Touch 1)
    if (i == 4) {
      if (touchValue < touchThreshold && currentMillis - lastTouchTime[i] > debounceDelay) {
        if (fanSpeed < 4) {  // Increase speed from 0 to 4
          fanSpeed++;
          updateFanSpeed();
          lastTouchTime[i] = currentMillis;
        }
      }
    }

    // Handle fan speed decrease (Down Touch 1)
    if (i == 5) {
      if (touchValue < touchThreshold && currentMillis - lastTouchTime[i] > debounceDelay) {
        if (fanSpeed > 0) {  // Decrease speed from 4 to 0
          fanSpeed--;
          updateFanSpeed();
          lastTouchTime[i] = currentMillis;
        }
      }
    }
  }

  handlePIRSensor();

  // Enter deep sleep after processing
  goToDeepSleep();
}
